#!/usr/bin/python3

from __future__ import print_function

import sys
import struct

def extract_isr_vector(inpath, outpath, num_isrs):
    # Resources:
    # https://en.wikipedia.org/wiki/Intel_HEX
    # http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.faqs/ka9903.html
    # read addresses from inpath
    vector = []
    for line in open(inpath, 'r'):
        line = bytearray.fromhex(line.strip()[1:])
        if not line:
            continue
        if line[3] != 0: # not a data record type
            continue
        if line[1] != 0x10: # check address
            # this data record isn't at address xxxx10xx where the ISR lies
            continue

        if line[0] != 16: # length of record: 16 bytes
            raise NotImplementedError('TODO: record lengths of different lengths')

        # read 4 words
        for i in range(4, 20, 4):
            vector.append(struct.unpack('I', line[i:i+4])[0])

        if len(vector) >= num_isrs:
            break

    f = open(outpath, 'w')
    f.write('// This file was generated by bootloader/extract-isr-vector.py\n')
    for i in range(len(vector)):
        f.write('#define ISR_VECTOR_%d ((void*)0x%08x)\n' % (i, vector[i]))
    f.close()

if __name__ == '__main__':
    extract_isr_vector(sys.argv[1], sys.argv[2], int(sys.argv[3]))
